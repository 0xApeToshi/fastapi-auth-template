name: Test FastAPI Auth Template

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read
  statuses: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        python-version: ['3.13']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U testuser; do
          echo "Waiting for postgres..."
          sleep 2
        done
    
    - name: Create test .env file
      run: |
        cat > .env << EOF
        SECRET_KEY=test-secret-key-for-ci-cd-only-not-for-production
        POSTGRES_HOST=localhost
        POSTGRES_PORT=5432
        POSTGRES_USER=testuser
        POSTGRES_PASSWORD=testpass
        POSTGRES_DB=testdb
        BACKEND_CORS_ORIGINS=http://localhost:3000,http://localhost:8000
        EOF
    
    - name: Run database migrations
      run: |
        alembic upgrade head
    
    - name: Run linting with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --config=.flake8
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --config=.flake8
    
    - name: Run type checking with mypy
      run: |
        mypy app/ --ignore-missing-imports --no-strict-optional --explicit-package-bases
      continue-on-error: true  # Don't fail CI for mypy issues
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing --tb=short
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Test API startup
      run: |
        # Start the API in background
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        API_PID=$!
        
        # Wait for API to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test OpenAPI docs are accessible
        curl -f http://localhost:8000/docs || exit 1
        
        # Stop the API
        kill $API_PID
    
    - name: Test database seeding scripts
      run: |
        # Test admin user creation
        python -m scripts.seed_admin admin@test.com testpassword123
        
        # Test test users creation
        python -m scripts.seed_test_users 5
        
        # Test main seeder
        python -m scripts.database_seeder --test-users 3
    
    - name: Integration tests with live API
      run: |
        # Start the API in background
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        API_PID=$!
        
        # Wait for API to start
        sleep 10
        
        # Create a test user via API
        curl -X POST "http://localhost:8000/api/v1/users/" \
          -H "Content-Type: application/json" \
          -d '{"email":"integration@test.com","password":"testpass123"}' \
          || exit 1
        
        # Test login
        LOGIN_RESPONSE=$(curl -X POST "http://localhost:8000/api/v1/auth/login" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "username=integration@test.com&password=testpass123")
        
        # Extract access token (basic extraction, in real scenario you'd use jq)
        echo "Login response: $LOGIN_RESPONSE"
        
        # Test authenticated endpoint (basic test without token parsing)
        curl -X GET "http://localhost:8000/api/v1/users/me" \
          -H "Authorization: Bearer fake-token-for-basic-test" \
          || echo "Expected to fail without valid token"
        
        # Stop the API
        kill $API_PID
    
    - name: Security check with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        # Display results but don't fail CI
        bandit -r app/ || echo "Security scan completed with warnings"
      continue-on-error: true
    
    - name: Check requirements for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || echo "Vulnerability scan completed"
      continue-on-error: true
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-python-${{ matrix.python-version }}
        path: |
          coverage.xml
          bandit-report.json
          safety-report.json
        retention-days: 30

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: fastapi-auth-template:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        # Build the image
        docker build -t fastapi-auth-template:test .
        
        # Create a test network
        docker network create test-network
        
        # Start PostgreSQL container
        docker run -d \
          --name test-postgres \
          --network test-network \
          -e POSTGRES_PASSWORD=testpass \
          -e POSTGRES_USER=testuser \
          -e POSTGRES_DB=testdb \
          postgres:17
        
        # Wait for PostgreSQL
        sleep 10
        
        # Run the FastAPI container
        docker run -d \
          --name test-api \
          --network test-network \
          -e SECRET_KEY=test-secret-key \
          -e POSTGRES_HOST=test-postgres \
          -e POSTGRES_PORT=5432 \
          -e POSTGRES_USER=testuser \
          -e POSTGRES_PASSWORD=testpass \
          -e POSTGRES_DB=testdb \
          -p 8000:8000 \
          fastapi-auth-template:test
        
        # Wait for API to start
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Cleanup
        docker stop test-api test-postgres
        docker rm test-api test-postgres
        docker network rm test-network

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Check code formatting with Black
      run: |
        black --check --diff app/ tests/ scripts/
    
    - name: Check import sorting with isort
      run: |
        isort --profile black app/ tests/ scripts/ && black app/ tests/ scripts/
    
    - name: Run flake8 linting
      run: |
        flake8 app/ tests/ scripts/
    
    # - name: Run type checking with mypy
    #   run: |
    #     mypy app/ --ignore-missing-imports
    #   continue-on-error: true